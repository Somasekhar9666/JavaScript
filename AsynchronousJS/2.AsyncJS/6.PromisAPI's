The Promise API in JavaScript provides methods that help work with multiple Promises in various useful ways, enabling better handling of asynchronous tasks. These methods are part of the Promise class itself and are not attached to any particular Promise instance. The main methods in the Promise API are:

1.Promise.all
2.Promise.race
3.Promise.allSettled
4.Promise.any

Each of these methods serves a different purpose for managing multiple Promises effectively, whether you're waiting for all of them to complete, the first one to complete, or even handling failures gracefully.



1. Promise.all
Promise.all takes an array of Promises and returns a single Promise that:
    Resolves when all the Promises in the array have resolved.
    Rejects immediately if any of the Promises reject.
Purpose:
Promise.all is useful when you need multiple asynchronous operations to complete successfully before proceeding. If any operation fails, Promise.all will reject right away, allowing you to handle the error.

Ex:
const promise1 = Promise.resolve(3);
const promise2 = new Promise((resolve) => setTimeout(resolve, 1000, 'foo'));
const promise3 = Promise.resolve('bar');

Promise.all([promise1, promise2, promise3])
  .then((results) => {
    console.log("All Promises resolved:", results);
  })
  .catch((error) => {
    console.error("One of the Promises rejected:", error);
  });

In this example:
    All Promises resolve successfully, so Promise.all returns an array of results: [3, 'foo', 'bar'].
    If any Promise in the array had rejected, the .catch() would be called immediately with the rejection reason.










2. Promise.race
Promise.race takes an array of Promises and returns a single Promise that:
    Resolves or Rejects as soon as the first Promise in the array resolves or rejects.

Purpose:
Promise.race is useful when you’re interested only in the result of the first Promise to complete, regardless of whether it was successful or not. This is handy when setting up timeouts or fallbacks.

Example:
const slowPromise = new Promise((resolve) => setTimeout(resolve, 3000, 'slow'));
const fastPromise = new Promise((resolve) => setTimeout(resolve, 1000, 'fast'));

Promise.race([slowPromise, fastPromise])
  .then((result) => {
    console.log("First Promise resolved:", result);
  })
  .catch((error) => {
    console.error("First Promise rejected:", error);
  });

In this example:
    fastPromise resolves first with the value 'fast', so Promise.race resolves with that value.
    Even though slowPromise would resolve later, it is ignored since Promise.race only cares about the first Promise to settle.










3. Promise.allSettled
Promise.allSettled takes an array of Promises and returns a single Promise that:
    Resolves when all Promises in the array have settled (either resolved or rejected).
    Never rejects; it always waits for all Promises to complete and provides their outcome.
Purpose:
Promise.allSettled is useful when you want the result of each Promise, regardless of whether it was successful or failed. This is handy when handling tasks that don’t necessarily depend on each other and where all outcomes need to be captured.

Example:
const promise1 = Promise.resolve('Success');
const promise2 = Promise.reject('Error');
const promise3 = Promise.resolve('Another Success');

Promise.allSettled([promise1, promise2, promise3])
  .then((results) => {
    results.forEach((result, index) => {
      console.log(`Promise ${index + 1}:`, result);
    });
  });


In this example:
Promise.allSettled returns an array of objects, each with a status (either 'fulfilled' or 'rejected') and a value or reason.
The results would look like this:

[
  { status: 'fulfilled', value: 'Success' },
  { status: 'rejected', reason: 'Error' },
  { status: 'fulfilled', value: 'Another Success' }
]











4. Promise.any
Promise.any takes an array of Promises and returns a single Promise that:
    Resolves as soon as the first Promise in the array resolves.
    Rejects only if all Promises reject, in which case it returns an AggregateError containing the reasons for all rejections.

Purpose:
Promise.any is useful when you’re interested in the first successful Promise. If all Promises fail, it allows handling that as well.

const promise1 = Promise.reject('Failed 1');
const promise2 = new Promise((resolve) => setTimeout(resolve, 2000, 'Success'));
const promise3 = Promise.reject('Failed 2');

Promise.any([promise1, promise2, promise3])
  .then((result) => {
    console.log("First successful Promise:", result);
  })
  .catch((error) => {
    console.error("All Promises failed:", error);
  });


In this example:
    promise2 is the first to resolve successfully, so Promise.any resolves with 'Success'.
    If all Promises had failed, Promise.any would reject with an AggregateError containing all rejection reasons.








Why Use These Promise API Methods?
Each of these methods helps in managing complex asynchronous operations involving multiple Promises. They can help:
    Coordinate actions that should wait for multiple async operations (e.g., loading various data sources).
    Set up timeouts or fallbacks (e.g., getting data from the fastest source with Promise.race).
    Retrieve the results of each Promise regardless of success/failure (e.g., monitoring multiple APIs with Promise.allSettled).
    Handle scenarios where only one successful outcome is needed (e.g., a quick data fetch using Promise.any).


