The life cycle of an event in JavaScript refers to the entire process that an event undergoes from the moment it is triggered to when it is fully processed and resolved. This includes all stages of its creation, propagation, handling, and completion.
While event flow (capturing, target, bubbling) refers to the path an event takes through the DOM, the event life cycle is a broader concept that also includes other elements like how an event is initiated and eventually disposed of.



so the stages in life cycle of EVENT is :
                1.Creation--> event object is created at the Document(root) Level.
                2.propagation( spreading or traveling) --> that created objet travles from the Document(root) level to targeted elemnt and babbule back to the Document Node.
                3.Event Handling-->As the event propagates (through capturing or bubbling phases), event listeners attached to any elements in the DOM hierarchy are executed.


Let’s break down the event life cycle and its relationship to event flow.
1.Creation/Triggering of the Event*******:
-->The life cycle of an event begins when an action occurs that triggers the event. This can be:
A user interaction, like a click, keypress, or scroll.
A programmatic action, such as dispatching an event through element.dispatchEvent(new Event('click')).

-->When this happens, the browser creates an event object which contains details about the event (e.g., the type of event, the target element, metadata like timestamps, coordinates, etc.).
Ex:let clickEvent = new Event('click');  // An event object for a click event

------------------------------------------------------------------------------------------------------------------------------------------------------








2.Event Propagation (Event Flow)**********:
Event flow refers to the path an event takes through the DOM (Document Object Model) when it is triggered. When an event like a click happens, it doesn't simply stay at the element where it occurred. Instead, it moves through three phases, which are known as the event flow phases. These phases are:
1.Capturing Phase (Trickling Down())
2.Target Phase
3.Bubbling Phase (Bouncing Up)


2.1. Capturing Phase (Trickling Down):
*Description: In this phase, the event starts from the root (the document) and travels down the DOM tree towards the target element where the event was triggered. This is like moving step-by-step from the parent element to the child elements, starting from the topmost ancestor (e.g., document) and going down towards the actual element where the user action happened (the target element).

--->Why it’s called Capturing: The event is captured at each DOM level as it moves from the root downwards to the target. It "captures" the event at each level and gives any event listeners at that level a chance to respond to it.

            
            In the context of the capturing phase of event flow in JavaScript, "it" refers to the event object that is created when an event (like a click) occurs. Here’s a more detailed breakdown:
                    Explanation of "It Captures the Event":
                        1.Event Object:
                            *-->When an event occurs (e.g., a user clicks a button), the browser creates an event object. This object contains information about the event, such as the type of event (click, keypress, etc.), the target element, and other relevant properties.
                        2.Capturing Phase:
                            *-->In the capturing phase, the event starts at the root of the DOM (the document object) and travels down towards the target element (the element that the user interacted with).
                            *-->As the event travels through each ancestor element, it is captured at each level. This means that the event object is passed down to each of these elements, allowing them to react to the event.
                        3.Why "Captures"?:
                            ***->Why it's called capturing: The event "captures" each element on its way down, giving each of those elements a chance to react before the event reaches the target.

                            *-->The term "capture" is used because the event is being intercepted by each DOM node as it moves down the tree. Each ancestor has the opportunity to handle the event before it reaches the target.
                            *-->If an event listener is set up on any ancestor element to respond during the capturing phase, it can capture and act upon the event before it reaches the target element.


*****Event listeners attached with {capture: true} will respond to the event during this phase.

Key Takeaway in this Pahase:
    "It captures the event" means that the event object is being intercepted and processed at each level of the DOM hierarchy during the capturing phase, allowing those elements to respond to the event before it reaches the target. This design gives developers more control over event handling, especially in complex UIs.



2.2.Target Phase:
Once the event reaches the target element (the actual element that was interacted with), event listeners specifically bound to this element are executed.
This is the focal point where the event reaches the element that originally caused the event.

->Why it’s called Target: This is where the event has reached the specific element where the user action occurred. The event is now targeted at the element that triggered it, like a button click or an input change.




2.3.Bubbling Phase (Bouncing Up):
*After reaching the target element and executing its event listeners, the event travels back up the DOM tree (from the target element back to the document).

*Event listeners attached without {capture: true} (i.e., default bubbling mode) will respond during this phase.

Why it's called bubbling: The event "bubbles" back up from the target element to the root, giving the parent elements a chance to handle the event as it moves upwards.

Visualization: After reaching the target, the event bubbles up like this:
        Target (Button) -> Parent Div -> Body -> HTML -> Document




------------------------------------------------------------------------------------------------

3. Event Handling (Execution of Listeners):
*As the event propagates (through capturing or bubbling phases), event listeners attached to any elements in the DOM hierarchy are executed.
*The event listener (callback function) receives the event object as a parameter and can perform actions based on it, such as logging data, stopping propagation, or preventing default behaviors.

ex:
    document.querySelector('#myButton').addEventListener('click', (event) => {
  console.log('Button clicked', event);
});

---------------------------------------------------------------------------------

4. Event Completion and Cleanup:
*Once the event has finished propagating through all relevant elements and all associated event listeners have been executed, the event life cycle comes to an end.
*The event object may be discarded, and any memory or resources associated with it are cleaned up by the browser.

---------------------------------------------------------------------------------------------------------







<<<<<<-----------------------Example---------->>>>>>>

Tooltip Scenario: Explaining the Event Lifecycle:
You have a webpage with 3 buttons in the middle. When you hover over any of these buttons, a tooltip pops up that describes the button's purpose.

We can break this scenario into event flow phases and explain how the event lifecycle works when you hover over one of the buttons.

Step-by-Step Explanation of the Event Lifecycle in the Scenario::::

1.Hover Over a Button (Mouse Hover Event Triggered):
The event flow begins when the user hovers their mouse over a button. The event triggered is a mouseover event.
The event object is created and initialized, which contains details such as the type of event (mouseover), the target element (the button), and the event propagation status.


2.Capturing Phase (Phase 1):
The event starts from the document object and moves down the DOM tree towards the target element (the button being hovered over).
The DOM tree will be traversed in this order: document → html → body → container (if there is one) → button.
If there are any event listeners for mouseover on document, html, body, or any parent elements of the button (with {capture: true}), those listeners will be executed first during the capturing phase.
During this phase, you can decide to stop the event from reaching the target by calling event.stopPropagation(), though this is rare in typical scenarios.


3.Target Phase (Phase 2):
Once the event reaches the button (the target element), any event listeners attached directly to that button for the mouseover event will be executed.
The tooltip is typically triggered during this phase. A common way to show the tooltip is by setting its visibility to visible and positioning it relative to the button.
Here, you could manipulate the event (such as modifying the tooltip content) and use event.preventDefault() if there was a need to prevent any default behavior (though for mouseover events, default behavior isn’t common).

4.Bubbling Phase (Phase 3):
After the event finishes executing on the target (button), it then begins bubbling back up through the DOM tree towards the document.
The DOM tree will now be traversed in reverse order: button → container (if any) → body → html → document.
If there are any event listeners attached to these parent elements for mouseover (without the {capture: true} flag), they will be executed in the bubbling phase.
The bubbling phase allows other elements to respond to the same event after the target element has handled it. For example, you might use the bubbling phase to handle hover effects on a larger container that surrounds the buttons.

5.Tooltip Hides on Mouse Out:
When the mouse moves away from the button, a mouseout event is triggered, and the event lifecycle starts again for this event type.
The mouseout event will propagate in the same manner (capturing → target → bubbling), allowing event listeners at any level to react and hide the tooltip.
