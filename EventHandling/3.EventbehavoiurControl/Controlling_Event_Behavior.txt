In JavaScript, event listeners provide a powerful mechanism to control how events behave as they propagate through the DOM. Hereâ€™s a detailed explanation of how you can control the behavior of events using methods like event.stopPropagation(), event.stopImmediatePropagation(), and event.preventDefault(), along with real-world use cases.

Controlling Event Behavior::
--------
1.event.stopPropagation():
    *Description: This method prevents the event from propagating (bubbling or capturing) to parent elements. 
        If called in the capturing phase, 
            it stops further propagation down the DOM; 
        if called in the bubbling phase, 
            it stops further propagation up the DOM.
Ex:
Use Case: Consider a dropdown menu inside a navigation bar. When you click on the dropdown, you might want to prevent clicks from closing the menu when clicking on its items.
    <nav>
    <ul>
        <li>Home</li>
        <li>About</li>
        <li>
            Services
            <ul id="dropdown">
                <li>Web Design</li>
                <li>SEO</li>
            </ul>
        </li>
    </ul>
</nav>

<script>
    document.addEventListener('click', () => {
        console.log('Nav clicked! Menu closed.');
        document.getElementById('dropdown').style.display = 'none';
    });

    document.getElementById('dropdown').addEventListener('click', (event) => {
        event.stopPropagation(); // Prevent nav click from closing dropdown
        console.log('Dropdown clicked!');
    });
</script>
---------

2.event.stopImmediatePropagation():
Description: This method not only prevents further propagation of the event but also stops any other event listeners on the same element from executing. It's useful when you have multiple listeners on the same element and want to control their execution.
Ex:
Use Case: Suppose you have a form where clicking a submit button might trigger multiple validation checks. You might want to stop all subsequent checks if one of them fails.
<form id="myForm">
    <input type="text" id="inputField" required />
    <button type="submit">Submit</button>
</form>

<script>
    document.getElementById('myForm').addEventListener('submit', (event) => {
        if (document.getElementById('inputField').value === '') {
            event.preventDefault(); // Prevent form submission
            console.log('Input is required');
            event.stopImmediatePropagation(); // Stop other submit listeners
        }
    });

    document.getElementById('myForm').addEventListener('submit', () => {
        console.log('Form submitted successfully!');
    });
</script>
---------

3.event.preventDefault():
Description: This method prevents the default action associated with the event from being triggered. For example, clicking on a link normally navigates to a new page; using this method can prevent that action.

Ex:
Use Case: You may want to implement a custom action on a link instead of navigating to another page.

<a href="https://example.com" id="myLink">Go to Example</a>

<script>
    document.getElementById('myLink').addEventListener('click', (event) => {
        event.preventDefault(); // Prevent the default navigation
        console.log('Link clicked, but not navigating to example.com');
        // Custom logic can go here (e.g., opening a modal)
    });
</script>










Question:
Q> can we stop the event object going to the target element , before in the capturin phase?
Answer:You can stop the event from reaching the target element during the capturing phase by calling event.stopPropagation() in a capturing listener. If you set the listener to capture (using the third parameter of addEventListener as true), the event can be intercepted before reaching the target.
Ex:
<div id="parent" style="padding: 20px; background: lightblue;">
    <button id="child">Click Me!</button>
</div>

<script>
    document.getElementById('parent').addEventListener('click', (event) => {
        event.stopPropagation(); // Prevent the event from reaching the child
        console.log('Parent clicked');
    }, true); // Capturing phase

    document.getElementById('child').addEventListener('click', (event) => {
        console.log('Child clicked'); // This will not run if parent stops propagation
    });
</script>







SUMMARY:
event.stopPropagation(): Use when you want to stop the event from bubbling or capturing further. It allows you to control which elements can react to an event.

event.stopImmediatePropagation(): Use when you have multiple event listeners on the same element and you want to stop all of them from executing after a certain condition is met.

event.preventDefault(): Use when you want to prevent the default action that is normally triggered by an event, such as navigation or form submission.
    

